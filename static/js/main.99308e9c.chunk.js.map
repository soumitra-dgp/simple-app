{"version":3,"sources":["components/TensorflowExample.js","logo.svg","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["TensorflowExample","useState","x","y","valuePairsState","setValuePairsState","model","trained","predictedValue","valueToPredict","modelState","setModelState","handleValuePairChange","e","updatedValuePairs","update","target","dataset","index","name","$set","parseInt","value","className","map","val","onChange","type","pattern","onClick","xValues","yValues","forEach","push","tf","add","dense","units","inputShape","compile","loss","optimizer","xs","length","ys","fit","epochs","then","placeholder","predict","arraySync","disabled","App","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99308e9c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport update from 'immutability-helper';\nimport * as tf from '@tensorflow/tfjs';\n\nimport './TensorflowExample.css';\n\nconst TensorflowExample = () => {\n    //Value pairs state\n    const [valuePairsState, setValuePairsState] = useState([\n        { x: -1, y: 1 },\n        { x: 0, y: 2 },\n        { x: 1, y: 3 },\n        { x: 2, y: 4 },\n        { x: 3, y: 5 },\n        { x: 4, y: 6 },\n    ]);\n\n    //Define the model state\n    const [modelState, setModelState] = useState({\n        model: null,\n        trained: false,\n        predictedValue: 'Click on train!',\n        valueToPredict: 1,\n    });\n\n    //Event handlers\n    const handleValuePairChange = (e) => {\n        const updatedValuePairs = update(valuePairsState, {\n            [e.target.dataset.index]: {\n                [e.target.name]: { $set: parseInt(e.target.value) }\n            }\n        })\n\n        setValuePairsState(\n            updatedValuePairs\n        )\n    };\n\n    const handleAddItem = () => {\n        setValuePairsState([\n            ...valuePairsState,\n            { x: 1, y: 3 }\n        ]);\n    };\n\n    const handleModelChange = (e) => setModelState({\n        ...modelState,\n        [e.target.name]: [parseInt(e.target.value)],\n    });\n\n    const handleTrainModel = () => {\n        let xValues = [],\n            yValues = [];\n\n        valuePairsState.forEach((val, index) => {\n            xValues.push(val.x);\n            yValues.push(val.y);\n        });\n\n        // Define a model for linear regression.\n        const model = tf.sequential();\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n\n        // Prepare the model for training: Specify the loss and the optimizer.\n        model.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\n        const xs = tf.tensor2d(xValues, [xValues.length, 1]);\n        const ys = tf.tensor2d(yValues, [yValues.length, 1]);\n\n        // Train the model using the data.\n        model.fit(xs, ys, { epochs: 250 }).then(() => {\n            setModelState({\n                ...modelState,\n                model: model,\n                trained: true,\n                predictedValue: 'Ready for making predictions',\n            });\n        });\n    }\n\n    const handlePredict = () => {\n        // Use the model to do inference on a data point the model hasn't seen before:\n        const predictedValue = modelState.model.predict(tf.tensor2d([modelState.valueToPredict], [1, 1])).arraySync()[0][0];\n\n        setModelState({\n            ...modelState,\n            predictedValue: predictedValue,\n        });\n    }\n\n    return (\n        <div className=\"tensorflow-example\">\n            <div className=\"train-controls\">\n                <h2 className=\"section\">Training Data (x,y) pairs</h2>\n                <div className=\"row labels\">\n                    <div className=\"field-label column\">X</div>\n                    <div className=\"field-label column\">Y</div>\n                </div>\n\n                {valuePairsState.map((val, index) => {\n                    return (\n                        <div key={index} className=\"row\">\n                            <input\n                                className=\"field field-x column\"\n                                value={val.x}\n                                name=\"x\"\n                                data-index={index}\n                                onChange={handleValuePairChange}\n                                type=\"number\" pattern=\"[0-9]*\" />\n                            <input\n                                className=\"field field-y column\"\n                                value={val.y}\n                                name=\"y\"\n                                data-index={index}\n                                onChange={handleValuePairChange}\n                                type=\"number\" />\n                        </div>\n                    );\n                })}\n\n                <button\n                    className=\"button-add-example button--green\"\n                    onClick={handleAddItem}>\n                    +\n                </button>\n                <button\n                    className=\"button-train button--green\"\n                    onClick={handleTrainModel}>\n                    Train\n                </button>\n            </div>\n\n            <div className=\"predict-controls\">\n                <h2 className=\"section\">Predicting</h2>\n                <input\n                    className=\"field element\"\n                    value={modelState.valueToPredict}\n                    name=\"valueToPredict\"\n                    onChange={handleModelChange}\n                    type=\"number\"\n                    placeholder=\"Enter an integer number\" /><br />\n                <div className=\"element\">\n                    {modelState.predictedValue}\n                </div>\n                <button\n                    className=\"element button--green\"\n                    onClick={handlePredict}\n                    disabled={!modelState.trained}>\n                    Predict\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default TensorflowExample;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n\nimport TensorflowExample from './components/TensorflowExample'\n\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n\n      <TensorflowExample/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.unregister();\n\n"],"sourceRoot":""}